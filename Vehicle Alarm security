import RPi.GPIO as GPIO
import time

import cv2
num=0
picLocation = '/home/pi/Arif Austine 597E/EGR597E/ij'

GPIO.setmode(GPIO.BOARD)

#set GPIO Pins
GPIO_TRIGGER_1 = 16
GPIO_ECHO_1= 18
GPIO_TRIGGER_2 = 11
GPIO_ECHO_2= 13
channel = 40
#set GPIO direction (IN / OUT)
GPIO.setup(GPIO_TRIGGER_1, GPIO.OUT)
GPIO.setup(GPIO_ECHO_1, GPIO.IN)
GPIO.setup(GPIO_TRIGGER_2, GPIO.OUT)
GPIO.setup(GPIO_ECHO_2, GPIO.IN)
GPIO.setup(channel, GPIO.IN)

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)

GPIO.add_event_detect(channel, GPIO.FALLING)

def distance_1():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER_1, True)
 
    # set Trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER_1, False)
 
    StartTime_1 = time.time()
    StopTime_1 = time.time()
 
    # save StartTime
    while GPIO.input(GPIO_ECHO_1) == 0:
        StartTime_1 = time.time()
 
    # save time of arrival
    while GPIO.input(GPIO_ECHO_1) == 1:
        StopTime_1 = time.time()
 
    # time difference between start and arrival
    TimeElapsed_1 = StopTime_1 - StartTime_1
    # multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance_1 = (TimeElapsed_1 * 34300) / 2
    #cv2.imwrite('/home/pi/Arif Austine 597E/EGR597E/i/$TIME(%d).jpg' %num,image1)

    return distance_1

def distance_2():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER_2, True)
 
    # set Trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER_2, False)
 
    StartTime_2 = time.time()
    StopTime_2 = time.time()
 
    # save StartTime
    while GPIO.input(GPIO_ECHO_2) == 0:
        StartTime_2 = time.time()
 
    # save time of arrival
    while GPIO.input(GPIO_ECHO_2) == 1:
        StopTime_2 = time.time()
 
    # time difference between start and arrival
    TimeElapsed_2 = StopTime_2 - StartTime_2
    # multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance_2 = (TimeElapsed_2 * 34300) / 2
    #cv2.imwrite('/home/pi/Arif Austine 597E/EGR597E/i/$TIME(%d).jpg' %num,image1)

    return distance_2

def positive_1():
        global num
        cam1 = cv2.VideoCapture(0)
        ret, image1 = cam1.read()
        cv2.imwrite('/home/pi/Arif Austine 597E/EGR597E/i/$TIME(%d).jpg' %num,image1)
        cam1.release()
        num=num+1
        
def positive_2():
        global num
        cam2 = cv2.VideoCapture(1)
        ret, image2 = cam2.read()
        cv2.imwrite('/home/pi/Arif Austine 597E/EGR597E/i/$TIME(%d).jpg' %num,image2)
        cam2.release()
        num=num+1
        
def positive_3(ev=None):
        global num
        print("Tilt Detected(%d)" %num)

        timeLocation = picLocation + '/$Front(' + str(num) + ').jpg'
        dateLocation = picLocation + '/$Rear(' + str(num) + ').jpg'
        
        cam1 = cv2.VideoCapture(0)
        ret, image1 = cam1.read()
        cam2 = cv2.VideoCapture(1)
        ret, image2 = cam2.read()
        
        cv2.imwrite(timeLocation,image1)
        cv2.imwrite(dateLocation,image2)
        
        cam1.release()
        cam2.release()

        num += 1


def loop():
    num
    dist_1 = distance_1()
    dist_2 = distance_2()
    time.sleep(2)
    if dist_1<10:
        positive_1()
        print ("Measured Distance Front side= %.1f cm" % dist_1)
    elif dist_2<10:
        positive_2()
        print ("Measured Distance Rear side= %.1f cm" % dist_2)
    elif GPIO.event_detected(channel):
        positive_3()
    else:
        print("rest")
    #while True:
      #  time.sleep(1)
        
        
if __name__ == '__main__':
    try:
        while True:
            loop()
            pass
    except KeyboardInterrupt: 
        GPIO.cleanup()
